// test.script
node ../bin/tss.js test.ts
// stdout
"loaded PREFIX/test.ts, TSS listening.."
[{"file":"PREFIX/test.ts"
  ,"start":{"line":3
  ,"character":5}
  ,"end":{"line":3
  ,"character":6}
  ,"text":"error TS1003: Identifier expected."
  ,"phase":"Syntax"
  ,"category":"Error"}
  ,{"file":"PREFIX/test.ts"
  ,"start":{"line":4
  ,"character":5}
  ,"end":{"line":4
  ,"character":6}
  ,"text":"error TS1003: Identifier expected."
  ,"phase":"Syntax"
  ,"category":"Error"}]
{"memberName":{"prefix":"string"
  ,"suffix":""
  ,"delim":""
  ,"entries":[{"prefix":""
  ,"suffix":""
  ,"delim":""
  ,"entries":[]}]}
  ,"docComment":""
  ,"fullSymbolName":"s"
  ,"kind":"var"
  ,"minChar":32
  ,"limChar":33
  ,"type":"string"}
{"memberName":{"prefix":"{ "
  ,"suffix":"}"
  ,"delim":"; "
  ,"entries":[{"prefix":"a: "
  ,"suffix":""
  ,"delim":""
  ,"entries":[{"prefix":"number"
  ,"suffix":""
  ,"delim":""
  ,"entries":[{"prefix":""
  ,"suffix":""
  ,"delim":""
  ,"entries":[]}]}]}
  ,{"prefix":"b: "
  ,"suffix":""
  ,"delim":""
  ,"entries":[{"prefix":"number"
  ,"suffix":""
  ,"delim":""
  ,"entries":[{"prefix":""
  ,"suffix":""
  ,"delim":""
  ,"entries":[]}]}]}]}
  ,"docComment":""
  ,"fullSymbolName":"x"
  ,"kind":"var"
  ,"minChar":38
  ,"limChar":39
  ,"type":"{ a: number; b: number; }"}
{"def":{"fileName":"PREFIX/test.ts"
  ,"minChar":23
  ,"limChar":29
  ,"kind":"var"
  ,"name":"s"
  ,"containerKind":""
  ,"containerName":""}
  ,"file":"PREFIX/test.ts"
  ,"min":{"line":2
  ,"character":5}
  ,"lim":{"line":2
  ,"character":11}}
{"def":{"fileName":"PREFIX/test.ts"
  ,"minChar":4
  ,"limChar":17
  ,"kind":"var"
  ,"name":"x"
  ,"containerKind":""
  ,"containerName":""}
  ,"file":"PREFIX/test.ts"
  ,"min":{"line":1
  ,"character":5}
  ,"lim":{"line":1
  ,"character":18}}
{"maybeInaccurate":false
  ,"isMemberCompletion":true
  ,"entries":[{"name":"toString"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): string"
  ,"fullSymbolName":"String.toString"
  ,"docComment":"Returns a string representation of a string. "}
  ,{"name":"charAt"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(pos: number): string"
  ,"fullSymbolName":"String.charAt"
  ,"docComment":"Returns the character at the specified index."}
  ,{"name":"charCodeAt"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(index: number): number"
  ,"fullSymbolName":"String.charCodeAt"
  ,"docComment":"Returns the Unicode value of the character at the specified location."}
  ,{"name":"concat"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(...strings: string[]): string"
  ,"fullSymbolName":"String.concat"
  ,"docComment":"Returns a string that contains the concatenation of two or more strings."}
  ,{"name":"indexOf"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(searchString: string, position?: number): number"
  ,"fullSymbolName":"String.indexOf"
  ,"docComment":"Returns the position of the first occurrence of a substring. "}
  ,{"name":"lastIndexOf"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(searchString: string, position?: number): number"
  ,"fullSymbolName":"String.lastIndexOf"
  ,"docComment":"Returns the last occurrence of a substring in the string."}
  ,{"name":"localeCompare"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(that: string, locales: string[], options?: Intl.CollatorOptions): number (+ 2 overload(s))"
  ,"fullSymbolName":"String.localeCompare"
  ,"docComment":"Determines whether two strings are equivalent in the current locale."}
  ,{"name":"match"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(regexp: string): string[] (+ 1 overload(s))"
  ,"fullSymbolName":"String.match"
  ,"docComment":"Matches a string with a regular expression, and returns an array containing the results of that search."}
  ,{"name":"replace"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(searchValue: string, replaceValue: string): string (+ 3 overload(s))"
  ,"fullSymbolName":"String.replace"
  ,"docComment":"Replaces text in a string, using a regular expression or search string."}
  ,{"name":"search"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(regexp: string): number (+ 1 overload(s))"
  ,"fullSymbolName":"String.search"
  ,"docComment":"Finds the first substring match in a regular expression search."}
  ,{"name":"slice"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(start?: number, end?: number): string"
  ,"fullSymbolName":"String.slice"
  ,"docComment":"Returns a section of a string."}
  ,{"name":"split"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(separator: string, limit?: number): string[] (+ 1 overload(s))"
  ,"fullSymbolName":"String.split"
  ,"docComment":"Split a string into substrings using the specified separator and return them as an array."}
  ,{"name":"substring"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(start: number, end?: number): string"
  ,"fullSymbolName":"String.substring"
  ,"docComment":"Returns the substring at the specified location within a String object. "}
  ,{"name":"toLowerCase"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): string"
  ,"fullSymbolName":"String.toLowerCase"
  ,"docComment":"Converts all the alphabetic characters in a string to lowercase. "}
  ,{"name":"toLocaleLowerCase"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): string"
  ,"fullSymbolName":"String.toLocaleLowerCase"
  ,"docComment":"Converts all alphabetic characters to lowercase, taking into account the host environment's current locale. "}
  ,{"name":"toUpperCase"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): string"
  ,"fullSymbolName":"String.toUpperCase"
  ,"docComment":"Converts all the alphabetic characters in a string to uppercase. "}
  ,{"name":"toLocaleUpperCase"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): string"
  ,"fullSymbolName":"String.toLocaleUpperCase"
  ,"docComment":"Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale. "}
  ,{"name":"trim"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): string"
  ,"fullSymbolName":"String.trim"
  ,"docComment":"Removes the leading and trailing white space and line terminator characters from a string. "}
  ,{"name":"length"
  ,"kind":"property"
  ,"kindModifiers":"public"
  ,"type":"number"
  ,"fullSymbolName":"String.length"
  ,"docComment":"Returns the length of a String object. "}
  ,{"name":"substr"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(from: number, length?: number): string"
  ,"fullSymbolName":"String.substr"
  ,"docComment":"Gets a substring beginning at the specified location and having the specified length."}]}
{"maybeInaccurate":false
  ,"isMemberCompletion":true
  ,"entries":[{"name":"a"
  ,"kind":"property"
  ,"kindModifiers":"public"
  ,"type":"number"
  ,"fullSymbolName":"a"
  ,"docComment":""}
  ,{"name":"b"
  ,"kind":"property"
  ,"kindModifiers":"public"
  ,"type":"number"
  ,"fullSymbolName":"b"
  ,"docComment":""}]}
"updated PREFIX/test.ts, (2/1) errors"
dumping PREFIX/test.ts
var x = {a:1,b:2};
var s = "";
var a = [];
{s.to }
{x. }
{a. }
[{"file":"PREFIX/test.ts"
  ,"start":{"line":5
  ,"character":5}
  ,"end":{"line":5
  ,"character":6}
  ,"text":"error TS1003: Identifier expected."
  ,"phase":"Syntax"
  ,"category":"Error"}
  ,{"file":"PREFIX/test.ts"
  ,"start":{"line":6
  ,"character":5}
  ,"end":{"line":6
  ,"character":6}
  ,"text":"error TS1003: Identifier expected."
  ,"phase":"Syntax"
  ,"category":"Error"}
  ,{"file":"PREFIX/test.ts"
  ,"start":{"line":4
  ,"character":4}
  ,"end":{"line":4
  ,"character":6}
  ,"text":"error TS2094: Property 'to' does not exist on value of type 'string'."
  ,"phase":"Semantics"
  ,"category":"Error"}]
{"maybeInaccurate":false
  ,"isMemberCompletion":true
  ,"entries":[{"name":"toString"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): string"
  ,"fullSymbolName":"String.toString"
  ,"docComment":"Returns a string representation of a string. "}
  ,{"name":"charAt"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(pos: number): string"
  ,"fullSymbolName":"String.charAt"
  ,"docComment":"Returns the character at the specified index."}
  ,{"name":"charCodeAt"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(index: number): number"
  ,"fullSymbolName":"String.charCodeAt"
  ,"docComment":"Returns the Unicode value of the character at the specified location."}
  ,{"name":"concat"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(...strings: string[]): string"
  ,"fullSymbolName":"String.concat"
  ,"docComment":"Returns a string that contains the concatenation of two or more strings."}
  ,{"name":"indexOf"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(searchString: string, position?: number): number"
  ,"fullSymbolName":"String.indexOf"
  ,"docComment":"Returns the position of the first occurrence of a substring. "}
  ,{"name":"lastIndexOf"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(searchString: string, position?: number): number"
  ,"fullSymbolName":"String.lastIndexOf"
  ,"docComment":"Returns the last occurrence of a substring in the string."}
  ,{"name":"localeCompare"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(that: string, locales: string[], options?: Intl.CollatorOptions): number (+ 2 overload(s))"
  ,"fullSymbolName":"String.localeCompare"
  ,"docComment":"Determines whether two strings are equivalent in the current locale."}
  ,{"name":"match"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(regexp: string): string[] (+ 1 overload(s))"
  ,"fullSymbolName":"String.match"
  ,"docComment":"Matches a string with a regular expression, and returns an array containing the results of that search."}
  ,{"name":"replace"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(searchValue: string, replaceValue: string): string (+ 3 overload(s))"
  ,"fullSymbolName":"String.replace"
  ,"docComment":"Replaces text in a string, using a regular expression or search string."}
  ,{"name":"search"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(regexp: string): number (+ 1 overload(s))"
  ,"fullSymbolName":"String.search"
  ,"docComment":"Finds the first substring match in a regular expression search."}
  ,{"name":"slice"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(start?: number, end?: number): string"
  ,"fullSymbolName":"String.slice"
  ,"docComment":"Returns a section of a string."}
  ,{"name":"split"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(separator: string, limit?: number): string[] (+ 1 overload(s))"
  ,"fullSymbolName":"String.split"
  ,"docComment":"Split a string into substrings using the specified separator and return them as an array."}
  ,{"name":"substring"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(start: number, end?: number): string"
  ,"fullSymbolName":"String.substring"
  ,"docComment":"Returns the substring at the specified location within a String object. "}
  ,{"name":"toLowerCase"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): string"
  ,"fullSymbolName":"String.toLowerCase"
  ,"docComment":"Converts all the alphabetic characters in a string to lowercase. "}
  ,{"name":"toLocaleLowerCase"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): string"
  ,"fullSymbolName":"String.toLocaleLowerCase"
  ,"docComment":"Converts all alphabetic characters to lowercase, taking into account the host environment's current locale. "}
  ,{"name":"toUpperCase"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): string"
  ,"fullSymbolName":"String.toUpperCase"
  ,"docComment":"Converts all the alphabetic characters in a string to uppercase. "}
  ,{"name":"toLocaleUpperCase"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): string"
  ,"fullSymbolName":"String.toLocaleUpperCase"
  ,"docComment":"Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale. "}
  ,{"name":"trim"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): string"
  ,"fullSymbolName":"String.trim"
  ,"docComment":"Removes the leading and trailing white space and line terminator characters from a string. "}
  ,{"name":"length"
  ,"kind":"property"
  ,"kindModifiers":"public"
  ,"type":"number"
  ,"fullSymbolName":"String.length"
  ,"docComment":"Returns the length of a String object. "}
  ,{"name":"substr"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(from: number, length?: number): string"
  ,"fullSymbolName":"String.substr"
  ,"docComment":"Gets a substring beginning at the specified location and having the specified length."}]}
{"maybeInaccurate":false
  ,"isMemberCompletion":true
  ,"entries":[{"name":"a"
  ,"kind":"property"
  ,"kindModifiers":"public"
  ,"type":"number"
  ,"fullSymbolName":"a"
  ,"docComment":""}
  ,{"name":"b"
  ,"kind":"property"
  ,"kindModifiers":"public"
  ,"type":"number"
  ,"fullSymbolName":"b"
  ,"docComment":""}]}
{"maybeInaccurate":false
  ,"isMemberCompletion":true
  ,"entries":[{"name":"toString"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): string"
  ,"fullSymbolName":"Array<T>.toString"
  ,"docComment":"Returns a string representation of an array."}
  ,{"name":"toLocaleString"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): string"
  ,"fullSymbolName":"Array<T>.toLocaleString"
  ,"docComment":""}
  ,{"name":"concat"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"<U extends T[]>(...items: U[]): T[] (+ 1 overload(s))"
  ,"fullSymbolName":"Array<T>.concat"
  ,"docComment":"Combines two or more arrays."}
  ,{"name":"join"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(separator?: string): string"
  ,"fullSymbolName":"Array<T>.join"
  ,"docComment":"Adds all the elements of an array separated by the specified separator string."}
  ,{"name":"pop"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): T"
  ,"fullSymbolName":"Array<T>.pop"
  ,"docComment":"Removes the last element from an array and returns it."}
  ,{"name":"push"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(...items: T[]): number"
  ,"fullSymbolName":"Array<T>.push"
  ,"docComment":"Appends new elements to an array, and returns the new length of the array."}
  ,{"name":"reverse"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): T[]"
  ,"fullSymbolName":"Array<T>.reverse"
  ,"docComment":"Reverses the elements in an Array. "}
  ,{"name":"shift"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): T"
  ,"fullSymbolName":"Array<T>.shift"
  ,"docComment":"Removes the first element from an array and returns it."}
  ,{"name":"slice"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(start?: number, end?: number): T[]"
  ,"fullSymbolName":"Array<T>.slice"
  ,"docComment":"Returns a section of an array."}
  ,{"name":"sort"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(compareFn?: (a: T, b: T) => number): T[]"
  ,"fullSymbolName":"Array<T>.sort"
  ,"docComment":"Sorts an array."}
  ,{"name":"splice"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(start: number): T[] (+ 1 overload(s))"
  ,"fullSymbolName":"Array<T>.splice"
  ,"docComment":"Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements."}
  ,{"name":"unshift"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(...items: T[]): number"
  ,"fullSymbolName":"Array<T>.unshift"
  ,"docComment":"Inserts new elements at the start of an array."}
  ,{"name":"indexOf"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(searchElement: T, fromIndex?: number): number"
  ,"fullSymbolName":"Array<T>.indexOf"
  ,"docComment":"Returns the index of the first occurrence of a value in an array."}
  ,{"name":"lastIndexOf"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(searchElement: T, fromIndex?: number): number"
  ,"fullSymbolName":"Array<T>.lastIndexOf"
  ,"docComment":"Returns the index of the last occurrence of a specified value in an array."}
  ,{"name":"every"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean"
  ,"fullSymbolName":"Array<T>.every"
  ,"docComment":"Determines whether all the members of an array satisfy the specified test."}
  ,{"name":"some"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean"
  ,"fullSymbolName":"Array<T>.some"
  ,"docComment":"Determines whether the specified callback function returns true for any element of an array."}
  ,{"name":"forEach"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void"
  ,"fullSymbolName":"Array<T>.forEach"
  ,"docComment":"Performs the specified action for each element in an array."}
  ,{"name":"map"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[]"
  ,"fullSymbolName":"Array<T>.map"
  ,"docComment":"Calls a defined callback function on each element of an array, and returns an array that contains the results."}
  ,{"name":"filter"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): T[]"
  ,"fullSymbolName":"Array<T>.filter"
  ,"docComment":"Returns the elements of an array that meet the condition specified in a callback function. "}
  ,{"name":"reduce"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T (+ 1 overload(s))"
  ,"fullSymbolName":"Array<T>.reduce"
  ,"docComment":"Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."}
  ,{"name":"reduceRight"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T (+ 1 overload(s))"
  ,"fullSymbolName":"Array<T>.reduceRight"
  ,"docComment":"Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."}
  ,{"name":"length"
  ,"kind":"property"
  ,"kindModifiers":"public"
  ,"type":"number"
  ,"fullSymbolName":"Array<T>.length"
  ,"docComment":"Gets or sets the length of the array. This is a number one higher than the highest element defined in an array."}]}
{"maybeInaccurate":false
  ,"isMemberCompletion":true
  ,"entries":[{"name":"toString"
  ,"kind":"method"
  ,"kindModifiers":"public"}
  ,{"name":"toLocaleString"
  ,"kind":"method"
  ,"kindModifiers":"public"}
  ,{"name":"concat"
  ,"kind":"method"
  ,"kindModifiers":"public"}
  ,{"name":"join"
  ,"kind":"method"
  ,"kindModifiers":"public"}
  ,{"name":"pop"
  ,"kind":"method"
  ,"kindModifiers":"public"}
  ,{"name":"push"
  ,"kind":"method"
  ,"kindModifiers":"public"}
  ,{"name":"reverse"
  ,"kind":"method"
  ,"kindModifiers":"public"}
  ,{"name":"shift"
  ,"kind":"method"
  ,"kindModifiers":"public"}
  ,{"name":"slice"
  ,"kind":"method"
  ,"kindModifiers":"public"}
  ,{"name":"sort"
  ,"kind":"method"
  ,"kindModifiers":"public"}
  ,{"name":"splice"
  ,"kind":"method"
  ,"kindModifiers":"public"}
  ,{"name":"unshift"
  ,"kind":"method"
  ,"kindModifiers":"public"}
  ,{"name":"indexOf"
  ,"kind":"method"
  ,"kindModifiers":"public"}
  ,{"name":"lastIndexOf"
  ,"kind":"method"
  ,"kindModifiers":"public"}
  ,{"name":"every"
  ,"kind":"method"
  ,"kindModifiers":"public"}
  ,{"name":"some"
  ,"kind":"method"
  ,"kindModifiers":"public"}
  ,{"name":"forEach"
  ,"kind":"method"
  ,"kindModifiers":"public"}
  ,{"name":"map"
  ,"kind":"method"
  ,"kindModifiers":"public"}
  ,{"name":"filter"
  ,"kind":"method"
  ,"kindModifiers":"public"}
  ,{"name":"reduce"
  ,"kind":"method"
  ,"kindModifiers":"public"}
  ,{"name":"reduceRight"
  ,"kind":"method"
  ,"kindModifiers":"public"}
  ,{"name":"length"
  ,"kind":"property"
  ,"kindModifiers":"public"}]}
{"maybeInaccurate":false
  ,"isMemberCompletion":true
  ,"entries":[{"name":"toString"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): string"
  ,"fullSymbolName":"String.toString"
  ,"docComment":"Returns a string representation of a string. "}
  ,{"name":"toLowerCase"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): string"
  ,"fullSymbolName":"String.toLowerCase"
  ,"docComment":"Converts all the alphabetic characters in a string to lowercase. "}
  ,{"name":"toLocaleLowerCase"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): string"
  ,"fullSymbolName":"String.toLocaleLowerCase"
  ,"docComment":"Converts all alphabetic characters to lowercase, taking into account the host environment's current locale. "}
  ,{"name":"toUpperCase"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): string"
  ,"fullSymbolName":"String.toUpperCase"
  ,"docComment":"Converts all the alphabetic characters in a string to uppercase. "}
  ,{"name":"toLocaleUpperCase"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): string"
  ,"fullSymbolName":"String.toLocaleUpperCase"
  ,"docComment":"Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale. "}]
  ,"prefix":"to"}
"TSS closing"

// stderr

// issue-9.script
node ../bin/tss.js empty.ts
// stdout
"loaded PREFIX/empty.ts, TSS listening.."
"updated PREFIX/empty.ts, (1/0) errors"
[{"file":"PREFIX/empty.ts"
  ,"start":{"line":2
  ,"character":1}
  ,"end":{"line":2
  ,"character":1}
  ,"text":"error TS1109: Expression expected."
  ,"phase":"Syntax"
  ,"category":"Error"}]
"updated PREFIX/empty.ts, (0/0) errors"
[]
"updated PREFIX/empty.ts, (1/0) errors"
[{"file":"PREFIX/empty.ts"
  ,"start":{"line":2
  ,"character":1}
  ,"end":{"line":2
  ,"character":1}
  ,"text":"error TS1109: Expression expected."
  ,"phase":"Syntax"
  ,"category":"Error"}]
"TSS closing"

// stderr

// issue-10.script
node ../bin/tss.js empty.ts
// stdout
"loaded PREFIX/empty.ts, TSS listening.."
"updated PREFIX/empty.ts, (0/0) errors"
"updated PREFIX/empty.ts, (0/0) errors"
{"def":{"fileName":"PREFIX/empty.ts"
  ,"minChar":4
  ,"limChar":10
  ,"kind":"var"
  ,"name":"i"
  ,"containerKind":""
  ,"containerName":""}
  ,"file":"PREFIX/empty.ts"
  ,"min":{"line":1
  ,"character":5}
  ,"lim":{"line":1
  ,"character":11}}
"TSS closing"

// stderr

// issue-11.script
node ../bin/tss.js empty.ts
// stdout
"loaded PREFIX/empty.ts, TSS listening.."
"updated PREFIX/empty.ts, (1/1) errors"
[{"file":"PREFIX/empty.ts"
  ,"start":{"line":1
  ,"character":11}
  ,"end":{"line":1
  ,"character":11}
  ,"text":"error TS1002: Missing close quote character."
  ,"phase":"Syntax"
  ,"category":"Error"}
  ,{"file":"PREFIX/empty.ts"
  ,"start":{"line":1
  ,"character":1}
  ,"end":{"line":1
  ,"character":4}
  ,"text":"error TS2095: Cannot find name 'foo'."
  ,"phase":"Semantics"
  ,"category":"Error"}]
"TSS closing"

// stderr

// issue-12.script
node ../bin/tss.js empty.ts
// stdout
"loaded PREFIX/empty.ts, TSS listening.."
"updated PREFIX/empty.ts, (0/0) errors"
null
"TSS closing"

// stderr

// issue-13.script
node ../bin/tss.js empty.ts
// stdout
"loaded PREFIX/empty.ts, TSS listening.."
"updated PREFIX/empty.ts, (0/1) errors"
{"maybeInaccurate":false
  ,"isMemberCompletion":false
  ,"entries":[{"name":"bar"
  ,"kind":"parameter"
  ,"kindModifiers":"public"
  ,"type":"any"
  ,"fullSymbolName":"bar"
  ,"docComment":""}
  ,{"name":"boolean"
  ,"kind":"primitive type"
  ,"kindModifiers":""}
  ,{"name":"blur"
  ,"kind":"function"
  ,"kindModifiers":"declare"
  ,"type":"(): void"
  ,"fullSymbolName":"blur"
  ,"docComment":""}
  ,{"name":"btoa"
  ,"kind":"function"
  ,"kindModifiers":"declare"
  ,"type":"(rawString: string): string"
  ,"fullSymbolName":"btoa"
  ,"docComment":""}
  ,{"name":"break"
  ,"kind":"keyword"
  ,"kindModifiers":""
  ,"type":null
  ,"fullSymbolName":"break"
  ,"docComment":null}]
  ,"prefix":"b"}
"updated PREFIX/empty.ts"
{"maybeInaccurate":false
  ,"isMemberCompletion":false
  ,"entries":[{"name":"bar"
  ,"kind":"parameter"
  ,"kindModifiers":"public"
  ,"type":"any"
  ,"fullSymbolName":"bar"
  ,"docComment":""}
  ,{"name":"boolean"
  ,"kind":"primitive type"
  ,"kindModifiers":""}
  ,{"name":"blur"
  ,"kind":"function"
  ,"kindModifiers":"declare"
  ,"type":"(): void"
  ,"fullSymbolName":"blur"
  ,"docComment":""}
  ,{"name":"btoa"
  ,"kind":"function"
  ,"kindModifiers":"declare"
  ,"type":"(rawString: string): string"
  ,"fullSymbolName":"btoa"
  ,"docComment":""}
  ,{"name":"break"
  ,"kind":"keyword"
  ,"kindModifiers":""
  ,"type":null
  ,"fullSymbolName":"break"
  ,"docComment":null}]
  ,"prefix":"b"}
"TSS closing"

// stderr

// partial-update.script
node ../bin/tss.js empty.ts
// stdout
"loaded PREFIX/empty.ts, TSS listening.."
"updated PREFIX/empty.ts, (0/0) errors"
dumping PREFIX/empty.ts
function foo(bar) {
bar
}
"updated lines 2-2 in PREFIX/empty.ts, (0/0) errors"
dumping PREFIX/empty.ts
function foo(bar) {
"hi";
"ho";
}
"updated lines 4-4 in PREFIX/empty.ts, (0/0) errors"
dumping PREFIX/empty.ts
function foo(bar) {
"hi";
"ho";
} // EOF
"updated lines 3-3 in PREFIX/empty.ts, (0/1) errors"
dumping PREFIX/empty.ts
function foo(bar) {
"hi";
bozo;
} // EOF
[{"file":"PREFIX/empty.ts"
  ,"start":{"line":3
  ,"character":1}
  ,"end":{"line":3
  ,"character":5}
  ,"text":"error TS2095: Cannot find name 'bozo'."
  ,"phase":"Semantics"
  ,"category":"Error"}]
"updated lines 5-5 in PREFIX/empty.ts, (0/1) errors"
dumping PREFIX/empty.ts
function foo(bar) {
"hi";
bozo;
} // EOF
// postmortem
"updated lines 0-0 in PREFIX/empty.ts, (0/1) errors"
dumping PREFIX/empty.ts
// header
function foo(bar) {
"hi";
bozo;
} // EOF
// postmortem
"TSS closing"

// stderr

// update-nocheck-completion-chain.script
node ../bin/tss.js empty.ts
// stdout
"loaded PREFIX/empty.ts, TSS listening.."
"updated PREFIX/empty.ts"
{"maybeInaccurate":false
  ,"isMemberCompletion":true
  ,"entries":[{"name":"forEach"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void"
  ,"fullSymbolName":"Array<T>.forEach"
  ,"docComment":"Performs the specified action for each element in an array."}
  ,{"name":"filter"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): T[]"
  ,"fullSymbolName":"Array<T>.filter"
  ,"docComment":"Returns the elements of an array that meet the condition specified in a callback function. "}]
  ,"prefix":"f"}
"updated PREFIX/empty.ts"
{"maybeInaccurate":false
  ,"isMemberCompletion":true
  ,"entries":[{"name":"map"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[]"
  ,"fullSymbolName":"Array<T>.map"
  ,"docComment":"Calls a defined callback function on each element of an array, and returns an array that contains the results."}]
  ,"prefix":"m"}
"updated PREFIX/empty.ts"
{"maybeInaccurate":false
  ,"isMemberCompletion":true
  ,"entries":[{"name":"forEach"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void"
  ,"fullSymbolName":"Array<T>.forEach"
  ,"docComment":"Performs the specified action for each element in an array."}]
  ,"prefix":"fo"}
"updated PREFIX/empty.ts"
{"maybeInaccurate":false
  ,"isMemberCompletion":true
  ,"entries":[{"name":"toLowerCase"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): string"
  ,"fullSymbolName":"String.toLowerCase"
  ,"docComment":"Converts all the alphabetic characters in a string to lowercase. "}
  ,{"name":"toLocaleLowerCase"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): string"
  ,"fullSymbolName":"String.toLocaleLowerCase"
  ,"docComment":"Converts all alphabetic characters to lowercase, taking into account the host environment's current locale. "}
  ,{"name":"toLocaleUpperCase"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): string"
  ,"fullSymbolName":"String.toLocaleUpperCase"
  ,"docComment":"Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale. "}]
  ,"prefix":"toL"}
"updated PREFIX/empty.ts"
{"maybeInaccurate":false
  ,"isMemberCompletion":false
  ,"entries":[{"name":"bar"
  ,"kind":"parameter"
  ,"kindModifiers":"public"
  ,"type":"any"
  ,"fullSymbolName":"bar"
  ,"docComment":""}]
  ,"prefix":"ba"}
"TSS closing"

// stderr

// issue-15.script
node ../bin/tss.js issue-15.ts
// stdout
"loaded PREFIX/issue-15.ts, TSS listening.."
"updated PREFIX/issue-15.ts"
{"memberName":{"prefix":"any"
  ,"suffix":""
  ,"delim":""
  ,"entries":[{"prefix":""
  ,"suffix":""
  ,"delim":""
  ,"entries":[]}]}
  ,"docComment":""
  ,"fullSymbolName":"xx"
  ,"kind":"local var"
  ,"minChar":353
  ,"limChar":355
  ,"type":"any"}
{"memberName":{"prefix":"Background.Class"
  ,"suffix":""
  ,"delim":""
  ,"entries":[{"prefix":""
  ,"suffix":""
  ,"delim":""
  ,"entries":[]}]}
  ,"docComment":""
  ,"fullSymbolName":"bg"
  ,"kind":"local var"
  ,"minChar":377
  ,"limChar":379
  ,"type":"Background.Class"}
{"maybeInaccurate":false
  ,"isMemberCompletion":true
  ,"entries":[{"name":"Class"
  ,"kind":"class"
  ,"kindModifiers":"export"
  ,"type":"Background.Class"
  ,"fullSymbolName":"Background.Class"
  ,"docComment":""}]}
{"maybeInaccurate":false
  ,"isMemberCompletion":true
  ,"entries":[{"name":"Class"
  ,"kind":"class"
  ,"kindModifiers":"export"
  ,"type":"Background.Class"
  ,"fullSymbolName":"Background.Class"
  ,"docComment":""}]}
null
{"maybeInaccurate":false
  ,"isMemberCompletion":true
  ,"entries":[{"name":"a"
  ,"kind":"property"
  ,"kindModifiers":"public"
  ,"type":"any"
  ,"fullSymbolName":"Background.Class.a"
  ,"docComment":""}
  ,{"name":"b"
  ,"kind":"property"
  ,"kindModifiers":"public"
  ,"type":"any"
  ,"fullSymbolName":"Background.Class.b"
  ,"docComment":""}
  ,{"name":"init"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): void"
  ,"fullSymbolName":"Background.Class.init"
  ,"docComment":""}]}
{"maybeInaccurate":false
  ,"isMemberCompletion":true
  ,"entries":[{"name":"test_var"
  ,"kind":"property"
  ,"kindModifiers":"public"
  ,"type":"any"
  ,"fullSymbolName":"Test.test_var"
  ,"docComment":""}
  ,{"name":"test_method"
  ,"kind":"method"
  ,"kindModifiers":"public"
  ,"type":"(): void"
  ,"fullSymbolName":"Test.test_method"
  ,"docComment":""}]}
"TSS closing"

// stderr

// issue-17.script
node ../bin/tss.js issue-17.ts
// stdout
"loaded PREFIX/issue-17.ts, TSS listening.."
[{"ref":{"fileName":"PREFIX/issue-17-import.ts"
  ,"minChar":58
  ,"limChar":63
  ,"isWriteAccess":false}
  ,"file":"PREFIX/issue-17-import.ts"
  ,"min":{"line":7
  ,"character":12}
  ,"lim":{"line":7
  ,"character":17}}
  ,{"ref":{"fileName":"PREFIX/issue-17.ts"
  ,"minChar":83
  ,"limChar":88
  ,"isWriteAccess":false}
  ,"file":"PREFIX/issue-17.ts"
  ,"min":{"line":4
  ,"character":8}
  ,"lim":{"line":4
  ,"character":13}}]
[{"ref":{"fileName":"PREFIX/issue-17-import.ts"
  ,"minChar":58
  ,"limChar":63
  ,"isWriteAccess":false}
  ,"file":"PREFIX/issue-17-import.ts"
  ,"min":{"line":7
  ,"character":12}
  ,"lim":{"line":7
  ,"character":17}}
  ,{"ref":{"fileName":"PREFIX/issue-17.ts"
  ,"minChar":83
  ,"limChar":88
  ,"isWriteAccess":false}
  ,"file":"PREFIX/issue-17.ts"
  ,"min":{"line":4
  ,"character":8}
  ,"lim":{"line":4
  ,"character":13}}]
"TSS closing"

// stderr

// concat-map.script
node ../bin/tss.js empty.ts
// stdout
"loaded PREFIX/empty.ts, TSS listening.."
"updated PREFIX/empty.ts, (0/0) errors"
[]
"TSS closing"

// stderr

